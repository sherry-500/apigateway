// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: idlmap.sql

package db

import (
	"context"
)

const createIdlmap = `-- name: CreateIdlmap :one
INSERT INTO idlmap (
    svcname,
    idl,
    type
) VALUES (
    $1, $2, $3
)RETURNING id, svcname, idl, type, created_at
`

type CreateIdlmapParams struct {
	Svcname string `json:"svcname"`
	Idl     string `json:"idl"`
	Type    string `json:"type"`
}

func (q *Queries) CreateIdlmap(ctx context.Context, arg CreateIdlmapParams) (Idlmap, error) {
	row := q.queryRow(ctx, q.createIdlmapStmt, createIdlmap, arg.Svcname, arg.Idl, arg.Type)
	var i Idlmap
	err := row.Scan(
		&i.ID,
		&i.Svcname,
		&i.Idl,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const deleteIdlmap = `-- name: DeleteIdlmap :exec
DELETE FROM idlmap
WHERE svcname = $1
`

func (q *Queries) DeleteIdlmap(ctx context.Context, svcname string) error {
	_, err := q.exec(ctx, q.deleteIdlmapStmt, deleteIdlmap, svcname)
	return err
}

const getIdlmap = `-- name: GetIdlmap :one
SELECT id, svcname, idl, type, created_at FROM idlmap
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIdlmap(ctx context.Context, id int64) (Idlmap, error) {
	row := q.queryRow(ctx, q.getIdlmapStmt, getIdlmap, id)
	var i Idlmap
	err := row.Scan(
		&i.ID,
		&i.Svcname,
		&i.Idl,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getIdlmapByName = `-- name: GetIdlmapByName :one
SELECT id, svcname, idl, type, created_at FROM idlmap
WHERE svcname = $1 LIMIT 1
`

func (q *Queries) GetIdlmapByName(ctx context.Context, svcname string) (Idlmap, error) {
	row := q.queryRow(ctx, q.getIdlmapByNameStmt, getIdlmapByName, svcname)
	var i Idlmap
	err := row.Scan(
		&i.ID,
		&i.Svcname,
		&i.Idl,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const listIdlmap = `-- name: ListIdlmap :many
SELECT id, svcname, idl, type, created_at FROM idlmap
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListIdlmapParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListIdlmap(ctx context.Context, arg ListIdlmapParams) ([]Idlmap, error) {
	rows, err := q.query(ctx, q.listIdlmapStmt, listIdlmap, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Idlmap{}
	for rows.Next() {
		var i Idlmap
		if err := rows.Scan(
			&i.ID,
			&i.Svcname,
			&i.Idl,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIdlmap = `-- name: UpdateIdlmap :one
UPDATE idlmap
SET idl = $2, type = $3
WHERE svcname = $1
RETURNING id, svcname, idl, type, created_at
`

type UpdateIdlmapParams struct {
	Svcname string `json:"svcname"`
	Idl     string `json:"idl"`
	Type    string `json:"type"`
}

func (q *Queries) UpdateIdlmap(ctx context.Context, arg UpdateIdlmapParams) (Idlmap, error) {
	row := q.queryRow(ctx, q.updateIdlmapStmt, updateIdlmap, arg.Svcname, arg.Idl, arg.Type)
	var i Idlmap
	err := row.Scan(
		&i.ID,
		&i.Svcname,
		&i.Idl,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}
