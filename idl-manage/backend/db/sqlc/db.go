// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createIdlmapStmt, err = db.PrepareContext(ctx, createIdlmap); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIdlmap: %w", err)
	}
	if q.deleteIdlmapStmt, err = db.PrepareContext(ctx, deleteIdlmap); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteIdlmap: %w", err)
	}
	if q.getIdlmapStmt, err = db.PrepareContext(ctx, getIdlmap); err != nil {
		return nil, fmt.Errorf("error preparing query GetIdlmap: %w", err)
	}
	if q.getIdlmapByNameStmt, err = db.PrepareContext(ctx, getIdlmapByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetIdlmapByName: %w", err)
	}
	if q.listIdlmapStmt, err = db.PrepareContext(ctx, listIdlmap); err != nil {
		return nil, fmt.Errorf("error preparing query ListIdlmap: %w", err)
	}
	if q.updateIdlmapStmt, err = db.PrepareContext(ctx, updateIdlmap); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateIdlmap: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createIdlmapStmt != nil {
		if cerr := q.createIdlmapStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIdlmapStmt: %w", cerr)
		}
	}
	if q.deleteIdlmapStmt != nil {
		if cerr := q.deleteIdlmapStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteIdlmapStmt: %w", cerr)
		}
	}
	if q.getIdlmapStmt != nil {
		if cerr := q.getIdlmapStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIdlmapStmt: %w", cerr)
		}
	}
	if q.getIdlmapByNameStmt != nil {
		if cerr := q.getIdlmapByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIdlmapByNameStmt: %w", cerr)
		}
	}
	if q.listIdlmapStmt != nil {
		if cerr := q.listIdlmapStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listIdlmapStmt: %w", cerr)
		}
	}
	if q.updateIdlmapStmt != nil {
		if cerr := q.updateIdlmapStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateIdlmapStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createIdlmapStmt    *sql.Stmt
	deleteIdlmapStmt    *sql.Stmt
	getIdlmapStmt       *sql.Stmt
	getIdlmapByNameStmt *sql.Stmt
	listIdlmapStmt      *sql.Stmt
	updateIdlmapStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createIdlmapStmt:    q.createIdlmapStmt,
		deleteIdlmapStmt:    q.deleteIdlmapStmt,
		getIdlmapStmt:       q.getIdlmapStmt,
		getIdlmapByNameStmt: q.getIdlmapByNameStmt,
		listIdlmapStmt:      q.listIdlmapStmt,
		updateIdlmapStmt:    q.updateIdlmapStmt,
	}
}
