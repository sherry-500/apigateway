// Code generated by hertz generator.

package demo

import (
	"context"
	"database/sql"
	"fmt"

	demo "idlManage/biz/model/demo"
	db "idlManage/db/sqlc"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateIdl .
// @router /idl-manage [POST]
func CreateIdl(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demo.IdlMap
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	arg := db.CreateIdlmapParams{
		Svcname: req.SvcName,
		Idl:     req.Idl,
		Type:    req.Type,
	}

	idlmap, err := db.StoreInstance.CreateIdlmap(ctx, arg)
	if err != nil {
		resp := &demo.Resp{
			Success: false,
			Message: err.Error(),
		}
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp := &demo.IdlMap{
		SvcName: idlmap.Svcname,
		Idl:     idlmap.Idl,
		Type:    idlmap.Type,
	}
	c.JSON(consts.StatusOK, resp)
}

// DeleteIdl .
// @router /idl-manage/:svcname [DELETE]
func DeleteIdl(ctx context.Context, c *app.RequestContext) {
	resp := new(demo.Resp)
	svcname := c.Param("svcname")
	err := db.StoreInstance.DeleteIdlmap(ctx, svcname)
	if err != nil {
		resp.Message = err.Error()
		resp.Success = false
		c.JSON(consts.StatusInternalServerError, err.Error())
		return
	}

	resp.Message = fmt.Sprintf("delete %s success", svcname)
	resp.Success = true
	c.JSON(consts.StatusOK, resp)
}

// UpdateIdl .
// @router /idl-manage/:svcname [PATCH]
func UpdateIdl(ctx context.Context, c *app.RequestContext) {
	var req demo.IdlMap
	err := c.BindAndValidate(&req)

	arg := db.UpdateIdlmapParams{
		Svcname: c.Param("svcname"),
		Idl:     req.Idl,
		Type:    req.Type,
	}
	idlmap, err := db.StoreInstance.UpdateIdlmap(ctx, arg)
	if err != nil {
		resp := &demo.Resp{
			Success: false,
			Message: err.Error(),
		}
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp := &demo.IdlMap{
		SvcName: idlmap.Svcname,
		Idl:     idlmap.Idl,
		Type:    idlmap.Type,
	}

	c.JSON(consts.StatusOK, resp)
}

// GetIdlByName .
// @router /idl-manage/:svcname [GET]
func GetIdlByName(ctx context.Context, c *app.RequestContext) {
	svcname := c.Param("svcname")

	idlmap, err := db.StoreInstance.GetIdlmapByName(ctx, svcname)
	if err != nil {
		resp := &demo.Resp{
			Success: false,
			Message: err.Error(),
		}
		if err == sql.ErrNoRows {
			c.JSON(consts.StatusNotFound, resp)
		} else {
			c.JSON(consts.StatusInternalServerError, resp)
		}
		return 
	}
	resp := &demo.IdlMap{
		SvcName: idlmap.Svcname,
		Idl:     idlmap.Idl,
		Type:    idlmap.Type,
	}
	c.JSON(consts.StatusOK, resp)
}

// ListIdl .
// @router /idl-manage [GET]
func ListIdl(ctx context.Context, c *app.RequestContext) {
	var req demo.ListReq
	err := c.BindAndValidate(&req)
	if err != nil {
		resp := &demo.Resp{
			Success: false,
			Message: err.Error(),
		}
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	var resp []*demo.IdlMap
	arg := db.ListIdlmapParams{
		Limit: req.PageSize,
		Offset: (req.PageID - 1) * req.PageSize,
	}
	idlmaps, err := db.StoreInstance.ListIdlmap(ctx, arg)
	if err != nil {
		resp := &demo.Resp{
			Success: false,
			Message: err.Error(),
		}
		if err == sql.ErrNoRows{
			c.JSON(consts.StatusNotFound, resp)
		}else{
			c.JSON(consts.StatusInternalServerError, resp)
		}
		return
	}

	for _, idlmap := range idlmaps{
		resp = append(resp, &demo.IdlMap{
			SvcName: idlmap.Svcname,
			Idl: idlmap.Idl,
			Type: idlmap.Type,
		})
	}
	c.JSON(consts.StatusOK, resp)
}
